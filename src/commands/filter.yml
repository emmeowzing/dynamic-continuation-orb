description: |
  Filter the list of modules (directories) provided in the shared config to those that contain changes.
parameters:
  modules:
    description: Directories which should be built upon changes.
    type: string
  modules-filtered:
    description: Path to the file where the filtered list of modules is generated
    type: string
    default: /tmp/modules-filtered.txt
  force-all:
    description: Forcibly build all the modules
    type: boolean
    default: false
  default-branch:
    description: The default branch of the repository.
    type: string
    default: master
  wildmatch-version:
    description: Wildmatch package version to install. For available versions, check PyPI - https://pypi.org/project/wildmatch/#description
    type: string
    default: 0.2.6
  circle-token:
    description: Token to authenticate with CircleCI
    type: string
    default: $CIRCLE_TOKEN
  circle-organization:
    description: CircleCI organization to query with your API key.
    type: string
    default: $CIRCLE_ORGANIZATION
  root-config:
    description: Provides the ability to map root repository changes (./) to a config file name.
    type: string
    default: app
  reporting-window:
    description: The time window used to calculate summary metrics for the default branch of the repository.
    type: enum
    enum: [last-7-days, last-90-days, last-24-hours, last-30-days, last-60-days]
    default: last-90-days
  squash-merge-lookbehind:
    description: Number of commits back to compare against following squash merges.
    type: string
    default: "1"
  include-config-changes:
    description: Include CircleCI config changes (e.g., scripts.yml) while checking for changed modules.
    type: boolean
    default: true
  project-type:
    description: Can be either GitHub (gh) or BitBucket (bb).
    type: enum
    enum: [github, bitbucket]
    default: github
  debug:
    description: Print git diff-tree output, filtered or unfiltered, to stdout for debugging purposes.
    type: boolean
    default: false
  cache:
    description: Whether or not to cache (i.e. you're calling these commands in your own job, not 'continue').
    type: boolean
    default: true
steps:
  - run:
      name: Generate changed modules
      command: |+
        if << parameters.debug >>; then
            pip install wildmatch==<< parameters.wildmatch-version >>

            echo "<< parameters.modules >>" | awk NF | while read module; do
                module_dots="$(echo "$module" | sed 's@/@.@g')"
                if [ "${#module_dots}" -gt 1 ] && [ "${module_dots::1}" = "." ]; then
                    module_dots="${module_dots:1}"
                fi
                if [ "${#module_dots}" -gt 1 ] && [ "${module_dots: -1}" = "." ]; then
                    module_dots="${module_dots::-1}"
                fi

                module_slashes="$(echo "$module" | sed 's@.@/@g')"
                if [ "${module_slashes::1}" = "/" ] && [ "${#module_slashes}" -gt 1 ]; then
                    module_slashes="${module_slashes:1}"
                fi
                if [ "${module_slashes: -1}" = "/" ] && [ "${#module_slashes}" -gt 1 ]; then
                    module_slashes="${module_slashes::-1}"
                fi

                if [ "$module_dots" = "." ]; then
                    if [ ! -f .circleci/"<< parameters.root-config >>.ignore" ]; then
                        touch .circleci/"<< parameters.root-config >>.ignore"
                    fi

                    printf "%s\\n\\n" "<< parameters.root-config >>:"
                    git diff-tree --no-commit-id --name-only -r HEAD << parameters.default-branch >> "$module_dots" | awk NF | wildmatch -c ".circleci/<< parameters.root-config >>.ignore"
                    printf "\\n\\n"
                else
                    if [ ! -f .circleci/"${module_dots}.ignore" ]; then
                        touch ".circleci/${module_dots}.ignore"
                    fi

                    printf "%s:\\n\\n" "$module_slashes"
                    git diff-tree --no-commit-id --name-only -r HEAD << parameters.default-branch >> "$module_slashes" | awk NF | wildmatch -c ".circleci/${module_dots}.ignore"
                    printf "\\n\\n"
                fi
            done
        fi

        if [ ! "<< parameters.circle-token >>" ]; then
            printf "Must set CircleCI token for successful authentication.\\n" >&2
            exit 1
        fi

        # Add each module to `modules-filtered` if 1) `force-all` is set to `true`, or 2) there is a diff against master at HEAD, or 3) no workflow runs have occurred on the default branch for this project in the past << parameters.reporting-window >> days.
        if [ ! << parameters.force-all >> ] && [ $(curl -s --request GET --url "https://circleci.com/api/v2/insights/<< parameters.project-type >>/<< parameters.circle-organization >>/${CIRCLE_PROJECT_REPONAME}/workflows?reporting-window=<< parameters.reporting-window >>" --header "Circle-Token: << parameters.circle-token >>" | '[ .items[].name ] | length') -eq 0 ]; then
            printf "Running all workflows.\\n"
            echo "<< parameters.modules >>" | awk NF | while read module; do
                module_dots="$(echo "$module" | sed 's@/@.@g')"
                if [ "${#module_dots}" -gt 1 ] && [ "${module_dots::1}" = "." ]; then
                    module_dots="${module_dots:1}"
                fi
                if [ "${#module_dots}" -gt 1 ] && [ "${module_dots: -1}" = "." ]; then
                    module_dots="${module_dots::-1}"
                fi

                echo "$module_dots" >> << parameters.modules-filtered >>
            done
        else
            if ! << parameters.debug >>; then pip install wildmatch==<< parameters.wildmatch-version >>; fi
            echo "<< parameters.modules >>" | awk NF | while read module; do
                module_dots="$(echo "$module" | sed 's@/@.@g')"
                if [ "${#module_dots}" -gt 1 ] && [ "${module_dots::1}" = "." ]; then
                    module_dots="${module_dots:1}"
                fi
                if [ "${#module_dots}" -gt 1 ] && [ "${module_dots: -1}" = "." ]; then
                    module_dots="${module_dots::-1}"
                fi

                module_slashes="$(echo "$module" | sed 's@.@/@g')"
                if [ "${module_slashes::1}" = "/" ] && [ "${#module_slashes}" -gt 1 ]; then
                    module_slashes="${module_slashes:1}"
                fi
                if [ "${module_slashes: -1}" = "/" ] && [ "${#module_slashes}" -gt 1 ]; then
                    module_slashes="${module_slashes::-1}"
                fi

                # Handle root module "."
                if [ "${module_dots}" = "." ]; then
                    if [ ! -f .circleci/"<< parameters.root-config >>.ignore" ]; then
                        touch .circleci/"<< parameters.root-config >>.ignore"
                    fi

                    if [ "$CIRCLE_BRANCH" = "<< parameters.default-branch >>" ]; then
                        if << parameters.force-all >> || [ "$(git diff-tree --no-commit-id --name-only -r HEAD~<< parameters.squash-merge-lookbehind >> << parameters.default-branch >> "$module_dots" | awk NF | wildmatch -c ".circleci/<< parameters.root-config >>.ignore")" != "" ] || ([ "$(git diff-tree --no-commit-id --name-only -r HEAD~<< parameters.squash-merge-lookbehind >> << parameters.default-branch >> ".circleci/<< parameters.root-config >>.yml" | awk NF)" != "" ] && << parameters.include-config-changes >>); then
                            echo "$module_dots" >> << parameters.modules-filtered >>
                            printf "%s\\n" "$module_slashes"
                        fi
                    else
                        if << parameters.force-all >> || [ "$(git diff-tree --no-commit-id --name-only -r HEAD << parameters.default-branch >> "$module_dots" | awk NF | wildmatch -c ".circleci/<< parameters.root-config >>.ignore")" != "" ] || ([ "$(git diff-tree --no-commit-id --name-only -r HEAD << parameters.default-branch >> ".circleci/<< parameters.root-config >>.yml" | awk NF)" != "" ] && << parameters.include-config-changes >>); then
                            echo "$module_dots" >> << parameters.modules-filtered >>
                            printf "%s\\n" "$module_slashes"
                        fi
                    fi

                    continue
                fi

                # Handle non-root modules
                if [ ! -f ".circleci/${module_dots}.ignore" ]; then
                    touch ".circleci/${module_dots}.ignore"
                fi

                if [ "$CIRCLE_BRANCH" = "<< parameters.default-branch >>" ]; then
                    if << parameters.force-all >> || [ "$(git diff-tree --no-commit-id --name-only -r HEAD~<< parameters.squash-merge-lookbehind >> << parameters.default-branch >> "$module_slashes" | awk NF | wildmatch -c ".circleci/${module_dots}.ignore")" != "" ] || ([ "$(git diff-tree --no-commit-id --name-only -r HEAD~<< parameters.squash-merge-lookbehind >> << parameters.default-branch >> .circleci/"$module_dots".yml | awk NF)" != "" ] && << parameters.include-config-changes >>); then
                        echo "$module_dots" >> << parameters.modules-filtered >>
                        printf "%s\\n" "$module_slashes"
                    fi
                else
                    if << parameters.force-all >> || [ "$(git diff-tree --no-commit-id --name-only -r HEAD << parameters.default-branch >> "$module_slashes" | awk NF | wildmatch -c ".circleci/${module_dots}.ignore")" != "" ] || ([ "$(git diff-tree --no-commit-id --name-only -r HEAD << parameters.default-branch >> .circleci/"$module_dots".yml | awk NF)" != "" ] && << parameters.include-config-changes >>); then
                        echo "$module_dots" >> << parameters.modules-filtered >>
                        printf "%s\\n" "$module_slashes"
                    fi
                fi
            done
        fi
  - when:
      condition: << parameters.cache >>
      steps:
        - save_cache:
            paths:
              - << parameters.modules-filtered >>
            key: modules-filtered-{{ .Environment.CIRCLE_WORKFLOW_ID }}
